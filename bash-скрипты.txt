Заголовок:

    #!/bin/bash

Внешние аргументы:

    $1, $2, $3 ...

        #!/bin/bash
        cp -r $1 $2
        rm -rf $1

Завершение скрипта:

    exit <код возврата>

        0   - успешное выполнение 
        1   - ошибка
        ...

Выставить права на исполнение:

    chmod +x <скрипт>.sh 

Переменные окружения:

    $SHELL - оболочка
    $PWD - каталог тсполняемого скрипта
    $HOME - домашний каьалог текущего пользователя
    $USER - текущий пользователь
    $PATH - обсолютные пути для исполняемых файлов

    .bashrc - файл с подгружаемыми переменными окружения

    env - список всех переменных окружения текущего пользователя

    export <имя переменной>=<значение переменной> - создание (имя переменной без $)

Переменные shell-а:

    всегда в нижнем регистре

    <имя переменной>=<значение переменной> - создание

Переменные скрипта:

    Присаоение:

        <переменная> = <значение>

    Обращение:

        $<переменная>

    Переменная из результата команды: 
    
        Бэктики `` (на [Ё]):

            today=date +`%d-%m`

        Через $:

            today=$(date '+%d-%m')            

Запись в одну строку (;):

    echo "hellow" ; echo "world"

Спецмальные параметры:

    $? - код возврата последней выполненной команды

        0   - успешное выполнение 
        1   - ошибка (grep xxx 1.txt ; echo $?)
        2   - ошибка выполнения внутренних команд шела
        126 - команда не может быть выполнена
        127 - команда не найдена

    $* - все переданные позиционные параметры

    $# - кол-во переданных позиционных параметров

Команда test/[]:

    Псевдогим команды в скрипте "[<пробел><условие><пробел>]":

        "test -d /tmp" то же самое что и "[ -d /tmp ]"

    Строки:

        <строка1> = <строка2>  - равно (test a = b ; echo $? - ошибка 1) (test a = a ; echo $? - успех 0)
        <строка1> != <строка2> - не равно (test a != b ; echo $? - успех 0)
        -z <строка>            - проверка на равенство нулю (test -z a; echo $? - ошибка 1)
        -n <строка>            - проверка на неравенство нулю (test -n a; echo $? - успех 0)

    Числа:

        -eq - равно
        -ne - не равно
        -ge - больше либо равно
        -gt - строго больше
        -le - меньше либо равно
        -lt - строго меньше

    Файлы:

        -e <файл> - существует
        -f <файл> - существует и это файл
        -d <файл> - существует и каталог
        -g <файл> - существует и выставлен SGID (set-group-ID)
        -k <файл> - существует и выставлен липкий бит (sticky bit)
        -r <файл> - существует и выставлено право на чтение
        -s <файл> - существует и не пустой
        -u <файл> - существует и выставлен SUID (set-user-ID)
        -w <файл> - существует и выставлено право на запись
        -x <файл> - существует и выставлено право на выполнение

Оператор if:

    if [ <условие1> ]; then
        <условие1 верно>
    elif [ <условие2> ]; then
        <условие2 верно>
    ...
    else
        <ни одно условие не верно>
    fi

    -a - and
    -o - or

    Если переменная строковая, то её лучше заключить в "" что бы ихбежать проблем с пробелами внутри строки

Арифметика:

    Операции:

        "+" - сложение
        "−" - вычитание
        "*" - умножение
        "/" - деление
        "**" - возведение в степень
        "%" - получение остатка от деления

    Выполнение:

        "*" нужно укранировать (\*)

        "let" - не тиеет собственного вывода(принта)

            let x=5+3; echo $x
            let x=5+3 | echo $x

        "expr" - вывод результата сразу 
        (+ должен быть отделён пробелами) 
        (не может работать со скобками)

            expr 3 + 5
            echo $(expr 3 + 5)

            expr 3 \* 5


        "(( ))"

            echo $((5+3))
            ((x=5+3)) | echo $x
         
Оператор case:

    case "$переменная" in
        "вариант1" ) команда ;;
        "вариант2" ) команда ;;
        *) команда
    esac




